<?php
	function db_connect()
	{
		$servername = "localhost";
		$username = "root";
		$password = "";
		$dbname = "unicorn";
		$dbconnection;
	
		try {
			$dbconnection = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
			
			// set the PDO error mode to exception
			$dbconnection->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
			
			//echo "Connected successfully"; 
			//return db connection
			return $dbconnection;
		} catch(PDOException $e){
			echo "Connection failed: " . $e->getMessage();
		}
	}

	//[START] Registration function
	function db_insert_user($user)
	{
		try {
			$dbconnection = db_connect();
			$now = date("Y-m-d h:i:sa");
		
			//Prepared SQL statement
			$stmt = $dbconnection->prepare("INSERT INTO `user` (`user_id`, `sex`, `privilege`, `eng_surname`, `eng_middle_name`, 
				`eng_name`, `email`, `tel`, `address_1`, `address_2`, `address_3`, `address_4`, `last_login_date`, 
				`reset`, `locked`, `password`, `reg_token`, `effect_date`, `expiry_date`, `remark`, `create_date`, `update_date`) 
				VALUES (:userID, :sex, 'U', :engSurname, :engMidName, 
				:engName, :email, :tel, 
				:address1, :address2, :address3, :address4, NULL, 
				'N', 'N', :encrypttedPassword, :regToken, '" . $now . "', NULL, NULL,'" . $now . "', '" . $now . "')");
		
			$stmt->bindParam(':userID', 			$user->getUserID());
			$stmt->bindParam(':sex', 				$user->getSex());
			$stmt->bindParam(':engSurname', 		$user->getEngSurname());
			$stmt->bindParam(':engMidName', 		$user->getEngMidName());
			$stmt->bindParam(':engName', 			$user->getEngName());
			$stmt->bindParam(':email', 				$user->getEmail());
			$stmt->bindParam(':tel', 				$user->getTel());
			$stmt->bindParam(':address1', 			$user->getAddress1());
			$stmt->bindParam(':address2', 			$user->getAddress2());
			$stmt->bindParam(':address3', 			$user->getAddress3());
			$stmt->bindParam(':address4', 			$user->getAddress4());
			$stmt->bindParam(':encrypttedPassword', $user->getEncrypttedPassword());
			$stmt->bindParam(':regToken', 			$user->getRegToken());
			
			//execute prepared sql statement to insert user table
			$stmt->execute();
			$result = $stmt->fetch(PDO::FETCH_ASSOC); 
			return $result["user_id"]; 
			//echo "New record created successfully";
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;
	}
	
	function db_select_user_by_UserID($userID)
	{
		try {
			$dbconnection = db_connect();
		
			//Prepared SQL statement
			$sql = "SELECT USER_ID FROM USER WHERE USER_ID=:userID";
			$stmt = $dbconnection->prepare($sql);
			$paramArray = array(':userID' => $userID);
			$stmt->execute($paramArray);
			$fetch = $stmt->fetch();
			echo $fetch['USER_ID'];
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;	
	}
	
	function db_select_user_by_Email($email)
	{
		try {
			$dbconnection = db_connect();
		
			//Prepared SQL statement
			$sql = "SELECT EMAIL FROM USER WHERE EMAIL=:email";
			$stmt = $dbconnection->prepare($sql);
			$paramArray = array(':email' => $email);
			$stmt->execute($paramArray);
			$fetch = $stmt->fetch();
			echo $fetch['EMAIL'];
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;	
	}
	
	function db_select_user_by_Email_RegToken($email, $regToken)
	{
		try {
			$dbconnection = db_connect();
		
			//Prepared SQL statement
			$sql = "SELECT USER_ID, EMAIL FROM USER WHERE EMAIL=:email and REG_TOKEN=:regToken";
			$stmt = $dbconnection->prepare($sql);
			$paramArray = array(':email' => $email, ':regToken' => $regToken);
			$stmt->execute($paramArray);
			$fetch = $stmt->fetch();
			
			$column_arr = array();
			$column_arr[] = $fetch['USER_ID'];
			$column_arr[] = $fetch['EMAIL'];
			
			return $column_arr;
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;	
	}
	
	function db_update_user_remove_RegToken($email, $regToken)
	{
		try {
			$dbconnection = db_connect();
		
			//Prepared SQL statement
			$sql = "UPDATE USER SET REG_TOKEN='' WHERE EMAIL=:email and REG_TOKEN=:regToken";
			$stmt = $dbconnection->prepare($sql);
			$paramArray = array(':email' => $email, ':regToken' => $regToken);
			$stmt->execute($paramArray);
			return $stmt->rowCount();
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;	
	}

	function db_update_user_lastLoginTime($email, $regToken)
	{		
		try {
			$dbconnection = db_connect();
			$now = date("Y-m-d h:i:sa");
			
			//Prepared SQL statement
			$sql = "UPDATE USER SET last_login_date='".$now."' WHERE EMAIL=:email and REG_TOKEN=:regToken";
			$stmt = $dbconnection->prepare($sql);
			$paramArray = array(':email' => $email, ':regToken' => $regToken);
			$stmt->execute($paramArray);
			return $stmt->rowCount();
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;	
	}	
	//[END] Registration function
		
	//[START] Login and Logout function
	function db_select_user_by_UserID_or_Email_Password($userIdOrEmail, $password)
	{
		try {
			$dbconnection = db_connect();		
			$encryptedPassword = md5($password);
		
			//Prepared SQL statement
			$sql = "SELECT USER_ID, EMAIL FROM USER WHERE (USER_ID = :userIdOrEmail or EMAIL=:userIdOrEmail) and PASSWORD=:encryptedPassword";
			$stmt = $dbconnection->prepare($sql);
			$paramArray = array(':userIdOrEmail' => $userIdOrEmail, ':encryptedPassword' => $encryptedPassword);
			$stmt->execute($paramArray);
			$fetch = $stmt->fetch();
			
			$column_arr = array();
			$column_arr[] = $fetch['USER_ID'];
			$column_arr[] = $fetch['EMAIL'];
			
			return $column_arr;
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;	
	}
	
	function db_update_user_lastLoginTime_by_Email($email)
	{		
		try {
			$dbconnection = db_connect();
			$now = date("Y-m-d h:i:sa");
			
			//Prepared SQL statement
			$sql = "UPDATE USER SET last_login_date='".$now."' WHERE EMAIL=:email";
			$stmt = $dbconnection->prepare($sql);
			$paramArray = array(':email' => $email);
			$stmt->execute($paramArray);
			return $stmt->rowCount();
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;	
	}	
	//[END] Login and Logout function	
	

	//[START] Notification function		
	function db_delete_notification_by_status_date($status, $updateDate)
	{		
		try {
			$dbconnection = db_connect();

			//Prepared SQL statement
			$sql = "delete from unicorn.notification n where n.notification_id in 
			(select un.notification_id from unicorn.user_notification un where un.status = :status and un.update_date = :updateDate)";
			$stmt = $dbconnection->prepare($sql);
			$paramArray = array(':status' => $status, ':updateDate' => $updateDate);
			$stmt->execute($paramArray);
			return $stmt->rowCount();
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;	
	}	
	//[END] Notification function	
	
	//[START] Place order function
	function db_select_food_by_FoodID($orderDetail4Display_array)
	{
		try {
			$dbconnection = db_connect();
			
			$foodIDList = [];
			for ($index = 0; $index< count($orderDetail4Display_array); $index++) {
				$orderDetail4Display = $orderDetail4Display_array[$index];
				$foodIDList[] = $orderDetail4Display->getFoodID();
			}

			//Prepared SQL statement
			$inConditions = join(',', array_fill(0, count($foodIDList), '?'));
			$sql = "SELECT FOOD_ID, FOOD_CATEGORY, FOOD_NAME, PRICE FROM FOOD WHERE FOOD_ID IN (".$inConditions.")";
			$stmt = $dbconnection->prepare($sql);
			$stmt->execute($foodIDList);
			$result = $stmt->fetchAll(PDO::FETCH_ASSOC); 
			
			if(!isset($result)){
				return "";
			}
			
			$orderDetail_array = [];  
			for ($row = 0; $row< count($result); $row++) {
				$foodRow = $result[$row];
				
				for ($index = 0; $index< count($orderDetail4Display_array); $index++) {
					$orderDetail4Display = $orderDetail4Display_array[$index];
										
					if($foodRow["FOOD_ID"] == $orderDetail4Display->getFoodID()){
						$orderDetail4Display->setFoodCategory($foodRow["FOOD_CATEGORY"]);
						$orderDetail4Display->setFoodName($foodRow["FOOD_NAME"]);
						$orderDetail4Display->setPrice($foodRow["PRICE"]);
						
						$orderDetail_array[] = $orderDetail4Display;
						break;
					}
				}
			}
			
			return $orderDetail_array;
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}
		
		//close db connection to release memory
		$dbconnection = null;
	}
	
	function db_insert_order($order)
	{
		try {
			$dbconnection = db_connect();
			$now = date("Y-m-d h:i:sa");
			
			//Prepared SQL statement
			$stmt = $dbconnection->prepare("INSERT INTO `order` (`order_id`, `user_id`, `status`, `order_effect_date`,
				`order_expiry_date`, `total_payment_amt`, `total_discount_amt`, `payment_date`, `payment_channel`,
				`credit_card_type`, `credit_card_no`, `credit_card_security_code`, `credit_card_holder_name`,
				`credit_card_expiry_date`, `cheque_no`, `remark`, `create_date`, `update_date`)
				VALUES(:orderID, :userID, :status, :orderEffectDate,
				:orderExpiryDate, :totalPaymentAmt, :totalDiscountAmt, :paymentDate, :paymentChannel,
				:creditCardType, :creditCardNo, :creditCardSecurityCode, :creditCardHolderName,
				:creditCardExpiryDate, :chequeNo, :remark,'" . $now . "', '" . $now . "')");
			
			$stmt->bindParam(':order_id', 					$user->getOrderID());
			$stmt->bindParam(':user_id', 					$user->getUserID());
			$stmt->bindParam(':status', 					$user->getStatus());
			$stmt->bindParam(':order_effect_date', 			$user->getOrderEffectDate());
			$stmt->bindParam(':order_expiry_date', 			$user->getOrderExpiryDate());
			$stmt->bindParam(':total_payment_amt', 			$user->getTotalPaymentAmt());
			$stmt->bindParam(':total_discount_amt', 		$user->getTotalDiscountAmt());
			$stmt->bindParam(':payment_date', 				$user->getPaymentDate());
			$stmt->bindParam(':payment_channel', 			$user->getPaymentChannel());
			$stmt->bindParam(':credit_card_type', 			$user->getCreditCardType());
			$stmt->bindParam(':credit_card_no', 			$user->getCreditCardNo());
			$stmt->bindParam(':credit_card_security_code', 	$user->getCreditCardSecurityCode());
			$stmt->bindParam(':credit_card_holder_name', 	$user->getCreditCardHolderName());
			$stmt->bindParam(':credit_card_expiry_date', 	$user->getCreditCardExpiryDate());
			$stmt->bindParam(':cheque_no', 					$user->getChequeNo());
			$stmt->bindParam(':remark', 					$user->getRemark());
			$stmt->bindParam(':create_date', 				$user->getCreateDate());
			$stmt->bindParam(':update_date', 				$user->getUpdateDate());		
			
			//execute prepared sql statement to insert user table
			$stmt->execute();
			$result = $stmt->fetch(PDO::FETCH_ASSOC);
			return $result["order_id"];
			//echo "New record created successfully";
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}
		
		//close db connection to release memory
		$dbconnection = null;
	}
	//[END] Place orderfunction
	
	/*
	//Not prefer to use the following function, we should use prepared statement to prevent SQL Injection hacking
	function db_insert($sql)
	{
		try {
			$dbconnection = db_connect();

			//execute sql to insert record
			$dbconnection->exec($sql);
			
			//echo "New record created successfully";
		}catch(PDOException $e){
			echo "<br>" . $e->getMessage();
		}

		//close db connection to release memory
		$dbconnection = null;
	}
	*/
?>